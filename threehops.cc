/* A RapidNet application. Generated by RapidNet compiler. */

#include "threehops.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::threehops;

const string Threehops::LINK = "link";
const string Threehops::ONEHOP = "onehop";
const string Threehops::R2LOCAL1R2LINKMIDSEND = "r2Local1r2linkMidsend";
const string Threehops::R2LOCAL2TWOHOPSSEND = "r2Local2twohopssend";
const string Threehops::R2LINKMID = "r2linkMid";
const string Threehops::R2LINKMIDDELETE = "r2linkMidDelete";
const string Threehops::R3LOCAL1R3ONEHOPMIDSEND = "r3Local1r3onehopMidsend";
const string Threehops::R3LOCAL2THREEHOPSSEND = "r3Local2threehopssend";
const string Threehops::R3ONEHOPMID = "r3onehopMid";
const string Threehops::R3ONEHOPMIDDELETE = "r3onehopMidDelete";
const string Threehops::R4LOCAL1R4TWOHOPSMIDSEND = "r4Local1r4twohopsMidsend";
const string Threehops::R4LOCAL2THREEHOPSSEND = "r4Local2threehopssend";
const string Threehops::R4TWOHOPSMID = "r4twohopsMid";
const string Threehops::R4TWOHOPSMIDDELETE = "r4twohopsMidDelete";
const string Threehops::THREEHOPS = "threehops";
const string Threehops::THREEHOPSDELETE = "threehopsDelete";
const string Threehops::TWOHOPS = "twohops";
const string Threehops::TWOHOPSDELETE = "twohopsDelete";

NS_LOG_COMPONENT_DEFINE ("Threehops");
NS_OBJECT_ENSURE_REGISTERED (Threehops);

TypeId
Threehops::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::threehops::Threehops")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<Threehops> ()
    ;
  return tid;
}

Threehops::Threehops()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Threehops::~Threehops()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
Threehops::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
Threehops::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("Threehops Application Started");
}

void
Threehops::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("Threehops Application Stopped");
}

void
Threehops::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (LINK, attrdeflist (
    attrdef ("link_attr1", IPV4),
    attrdef ("link_attr2", IPV4)));

  AddRelationWithKeys (ONEHOP, attrdeflist (
    attrdef ("onehop_attr1", IPV4),
    attrdef ("onehop_attr2", IPV4)));

  AddRelationWithKeys (R2LINKMID, attrdeflist (
    attrdef ("r2linkMid_attr1", IPV4),
    attrdef ("r2linkMid_attr2", IPV4)));

  AddRelationWithKeys (R3ONEHOPMID, attrdeflist (
    attrdef ("r3onehopMid_attr1", IPV4),
    attrdef ("r3onehopMid_attr2", IPV4)));

  AddRelationWithKeys (R4TWOHOPSMID, attrdeflist (
    attrdef ("r4twohopsMid_attr1", IPV4),
    attrdef ("r4twohopsMid_attr2", IPV4)));

  AddRelationWithKeys (THREEHOPS, attrdeflist (
    attrdef ("threehops_attr1", IPV4),
    attrdef ("threehops_attr2", IPV4)));

  AddRelationWithKeys (TWOHOPS, attrdeflist (
    attrdef ("twohops_attr1", IPV4),
    attrdef ("twohops_attr2", IPV4)));

}

void
Threehops::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, LINK))
    {
      R1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LINK))
    {
      R1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, R2LOCAL1R2LINKMIDSEND))
    {
      R2Local1Eca0RemoteIns (tuple);
    }
  if (IsRecvEvent (tuple, R2LINKMIDDELETE))
    {
      R2Local1Eca0RemoteDel (tuple);
    }
  if (IsInsertEvent (tuple, LINK))
    {
      R2Local1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LINK))
    {
      R2Local1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, R2LOCAL2TWOHOPSSEND))
    {
      R2Local2Eca0RemoteIns (tuple);
    }
  if (IsRecvEvent (tuple, TWOHOPSDELETE))
    {
      R2Local2Eca0RemoteDel (tuple);
    }
  if (IsInsertEvent (tuple, R2LINKMID))
    {
      R2Local2Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, R2LINKMID))
    {
      R2Local2Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, ONEHOP))
    {
      R2Local2Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, ONEHOP))
    {
      R2Local2Eca1Del (tuple);
    }
  if (IsRecvEvent (tuple, R3LOCAL1R3ONEHOPMIDSEND))
    {
      R3Local1Eca0RemoteIns (tuple);
    }
  if (IsRecvEvent (tuple, R3ONEHOPMIDDELETE))
    {
      R3Local1Eca0RemoteDel (tuple);
    }
  if (IsInsertEvent (tuple, ONEHOP))
    {
      R3Local1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, ONEHOP))
    {
      R3Local1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, R3LOCAL2THREEHOPSSEND))
    {
      R3Local2Eca0RemoteIns (tuple);
    }
  if (IsRecvEvent (tuple, THREEHOPSDELETE))
    {
      R3Local2Eca0RemoteDel (tuple);
    }
  if (IsInsertEvent (tuple, R3ONEHOPMID))
    {
      R3Local2Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, R3ONEHOPMID))
    {
      R3Local2Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, TWOHOPS))
    {
      R3Local2Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, TWOHOPS))
    {
      R3Local2Eca1Del (tuple);
    }
  if (IsRecvEvent (tuple, R4LOCAL1R4TWOHOPSMIDSEND))
    {
      R4Local1Eca0RemoteIns (tuple);
    }
  if (IsRecvEvent (tuple, R4TWOHOPSMIDDELETE))
    {
      R4Local1Eca0RemoteDel (tuple);
    }
  if (IsInsertEvent (tuple, TWOHOPS))
    {
      R4Local1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, TWOHOPS))
    {
      R4Local1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, R4LOCAL2THREEHOPSSEND))
    {
      R4Local2Eca0RemoteIns (tuple);
    }
  if (IsInsertEvent (tuple, R4TWOHOPSMID))
    {
      R4Local2Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, R4TWOHOPSMID))
    {
      R4Local2Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, ONEHOP))
    {
      R4Local2Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, ONEHOP))
    {
      R4Local2Eca1Del (tuple);
    }
}

void
Threehops::R1Eca0Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("R1Eca0Ins triggered");

  Ptr<Tuple> result = link;

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("link_attr3"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    ONEHOP,
    strlist ("link_attr1",
      "link_attr2",
      "link_attr3"),
    strlist ("onehop_attr1",
      "onehop_attr2",
      "onehop_attr3"));

  Insert (result);
}

void
Threehops::R1Eca0Del (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("R1Eca0Del triggered");

  Ptr<Tuple> result = link;

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("link_attr3"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    ONEHOP,
    strlist ("link_attr1",
      "link_attr2",
      "link_attr3"),
    strlist ("onehop_attr1",
      "onehop_attr2",
      "onehop_attr3"));

  Delete (result);
}

void
Threehops::R2Local1Eca0RemoteIns (Ptr<Tuple> r2Local1r2linkMidsend)
{
  RAPIDNET_LOG_INFO ("R2Local1Eca0RemoteIns triggered");

  Ptr<Tuple> result = r2Local1r2linkMidsend;

  result = result->Project (
    R2LINKMID,
    strlist ("r2Local1r2linkMidsend_attr1",
      "r2Local1r2linkMidsend_attr2",
      "r2Local1r2linkMidsend_attr3"),
    strlist ("r2linkMid_attr1",
      "r2linkMid_attr2",
      "r2linkMid_attr3"));

  Insert (result);
}

void
Threehops::R2Local1Eca0RemoteDel (Ptr<Tuple> r2linkMidDelete)
{
  RAPIDNET_LOG_INFO ("R2Local1Eca0RemoteDel triggered");

  Ptr<Tuple> result = r2linkMidDelete;

  result = result->Project (
    R2LINKMID,
    strlist ("r2linkMidDelete_attr1",
      "r2linkMidDelete_attr2",
      "r2linkMidDelete_attr3"),
    strlist ("r2linkMid_attr1",
      "r2linkMid_attr2",
      "r2linkMid_attr3"));

  Delete (result);
}

void
Threehops::R2Local1Eca0Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("R2Local1Eca0Ins triggered");

  Ptr<Tuple> result = link;

  result = result->Project (
    R2LOCAL1R2LINKMIDSEND,
    strlist ("link_attr1",
      "link_attr2",
      "link_attr3",
      "link_attr2"),
    strlist ("r2Local1r2linkMidsend_attr1",
      "r2Local1r2linkMidsend_attr2",
      "r2Local1r2linkMidsend_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R2Local1Eca0Del (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("R2Local1Eca0Del triggered");

  Ptr<Tuple> result = link;

  result = result->Project (
    R2LINKMIDDELETE,
    strlist ("link_attr1",
      "link_attr2",
      "link_attr3",
      "link_attr2"),
    strlist ("r2linkMidDelete_attr1",
      "r2linkMidDelete_attr2",
      "r2linkMidDelete_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R2Local2Eca0RemoteIns (Ptr<Tuple> r2Local2twohopssend)
{
  RAPIDNET_LOG_INFO ("R2Local2Eca0RemoteIns triggered");

  Ptr<Tuple> result = r2Local2twohopssend;

  result = result->Project (
    TWOHOPS,
    strlist ("r2Local2twohopssend_attr1",
      "r2Local2twohopssend_attr2",
      "r2Local2twohopssend_attr3"),
    strlist ("twohops_attr1",
      "twohops_attr2",
      "twohops_attr3"));

  Insert (result);
}

void
Threehops::R2Local2Eca0RemoteDel (Ptr<Tuple> twohopsDelete)
{
  RAPIDNET_LOG_INFO ("R2Local2Eca0RemoteDel triggered");

  Ptr<Tuple> result = twohopsDelete;

  result = result->Project (
    TWOHOPS,
    strlist ("twohopsDelete_attr1",
      "twohopsDelete_attr2",
      "twohopsDelete_attr3"),
    strlist ("twohops_attr1",
      "twohops_attr2",
      "twohops_attr3"));

  Delete (result);
}

void
Threehops::R2Local2Eca0Ins (Ptr<Tuple> r2linkMid)
{
  RAPIDNET_LOG_INFO ("R2Local2Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (ONEHOP)->Join (
    r2linkMid,
    strlist ("onehop_attr1"),
    strlist ("r2linkMid_attr2"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("r2linkMid_attr3"),
      VarExpr::New ("onehop_attr3"))));

  result = result->Project (
    R2LOCAL2TWOHOPSSEND,
    strlist ("r2linkMid_attr1",
      "r2linkMid_attr2",
      "Cost",
      "r2linkMid_attr1"),
    strlist ("r2Local2twohopssend_attr1",
      "r2Local2twohopssend_attr2",
      "r2Local2twohopssend_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R2Local2Eca0Del (Ptr<Tuple> r2linkMid)
{
  RAPIDNET_LOG_INFO ("R2Local2Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (ONEHOP)->Join (
    r2linkMid,
    strlist ("onehop_attr1"),
    strlist ("r2linkMid_attr2"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("r2linkMid_attr3"),
      VarExpr::New ("onehop_attr3"))));

  result = result->Project (
    TWOHOPSDELETE,
    strlist ("r2linkMid_attr1",
      "r2linkMid_attr2",
      "Cost",
      "r2linkMid_attr1"),
    strlist ("twohopsDelete_attr1",
      "twohopsDelete_attr2",
      "twohopsDelete_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R2Local2Eca1Ins (Ptr<Tuple> onehop)
{
  RAPIDNET_LOG_INFO ("R2Local2Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (R2LINKMID)->Join (
    onehop,
    strlist ("r2linkMid_attr2"),
    strlist ("onehop_attr1"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("r2linkMid_attr3"),
      VarExpr::New ("onehop_attr3"))));

  result = result->Project (
    R2LOCAL2TWOHOPSSEND,
    strlist ("r2linkMid_attr1",
      "onehop_attr1",
      "Cost",
      "r2linkMid_attr1"),
    strlist ("r2Local2twohopssend_attr1",
      "r2Local2twohopssend_attr2",
      "r2Local2twohopssend_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R2Local2Eca1Del (Ptr<Tuple> onehop)
{
  RAPIDNET_LOG_INFO ("R2Local2Eca1Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (R2LINKMID)->Join (
    onehop,
    strlist ("r2linkMid_attr2"),
    strlist ("onehop_attr1"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("r2linkMid_attr3"),
      VarExpr::New ("onehop_attr3"))));

  result = result->Project (
    TWOHOPSDELETE,
    strlist ("r2linkMid_attr1",
      "onehop_attr1",
      "Cost",
      "r2linkMid_attr1"),
    strlist ("twohopsDelete_attr1",
      "twohopsDelete_attr2",
      "twohopsDelete_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R3Local1Eca0RemoteIns (Ptr<Tuple> r3Local1r3onehopMidsend)
{
  RAPIDNET_LOG_INFO ("R3Local1Eca0RemoteIns triggered");

  Ptr<Tuple> result = r3Local1r3onehopMidsend;

  result = result->Project (
    R3ONEHOPMID,
    strlist ("r3Local1r3onehopMidsend_attr1",
      "r3Local1r3onehopMidsend_attr2",
      "r3Local1r3onehopMidsend_attr3"),
    strlist ("r3onehopMid_attr1",
      "r3onehopMid_attr2",
      "r3onehopMid_attr3"));

  Insert (result);
}

void
Threehops::R3Local1Eca0RemoteDel (Ptr<Tuple> r3onehopMidDelete)
{
  RAPIDNET_LOG_INFO ("R3Local1Eca0RemoteDel triggered");

  Ptr<Tuple> result = r3onehopMidDelete;

  result = result->Project (
    R3ONEHOPMID,
    strlist ("r3onehopMidDelete_attr1",
      "r3onehopMidDelete_attr2",
      "r3onehopMidDelete_attr3"),
    strlist ("r3onehopMid_attr1",
      "r3onehopMid_attr2",
      "r3onehopMid_attr3"));

  Delete (result);
}

void
Threehops::R3Local1Eca0Ins (Ptr<Tuple> onehop)
{
  RAPIDNET_LOG_INFO ("R3Local1Eca0Ins triggered");

  Ptr<Tuple> result = onehop;

  result = result->Project (
    R3LOCAL1R3ONEHOPMIDSEND,
    strlist ("onehop_attr1",
      "onehop_attr2",
      "onehop_attr3",
      "onehop_attr2"),
    strlist ("r3Local1r3onehopMidsend_attr1",
      "r3Local1r3onehopMidsend_attr2",
      "r3Local1r3onehopMidsend_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R3Local1Eca0Del (Ptr<Tuple> onehop)
{
  RAPIDNET_LOG_INFO ("R3Local1Eca0Del triggered");

  Ptr<Tuple> result = onehop;

  result = result->Project (
    R3ONEHOPMIDDELETE,
    strlist ("onehop_attr1",
      "onehop_attr2",
      "onehop_attr3",
      "onehop_attr2"),
    strlist ("r3onehopMidDelete_attr1",
      "r3onehopMidDelete_attr2",
      "r3onehopMidDelete_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R3Local2Eca0RemoteIns (Ptr<Tuple> r3Local2threehopssend)
{
  RAPIDNET_LOG_INFO ("R3Local2Eca0RemoteIns triggered");

  Ptr<Tuple> result = r3Local2threehopssend;

  result = result->Project (
    THREEHOPS,
    strlist ("r3Local2threehopssend_attr1",
      "r3Local2threehopssend_attr2",
      "r3Local2threehopssend_attr3"),
    strlist ("threehops_attr1",
      "threehops_attr2",
      "threehops_attr3"));

  Insert (result);
}

void
Threehops::R3Local2Eca0RemoteDel (Ptr<Tuple> threehopsDelete)
{
  RAPIDNET_LOG_INFO ("R3Local2Eca0RemoteDel triggered");

  Ptr<Tuple> result = threehopsDelete;

  result = result->Project (
    THREEHOPS,
    strlist ("threehopsDelete_attr1",
      "threehopsDelete_attr2",
      "threehopsDelete_attr3"),
    strlist ("threehops_attr1",
      "threehops_attr2",
      "threehops_attr3"));

  Delete (result);
}

void
Threehops::R3Local2Eca0Ins (Ptr<Tuple> r3onehopMid)
{
  RAPIDNET_LOG_INFO ("R3Local2Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TWOHOPS)->Join (
    r3onehopMid,
    strlist ("twohops_attr1"),
    strlist ("r3onehopMid_attr2"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("r3onehopMid_attr3"),
      VarExpr::New ("twohops_attr3"))));

  result = result->Project (
    R3LOCAL2THREEHOPSSEND,
    strlist ("r3onehopMid_attr1",
      "twohops_attr2",
      "Cost",
      "r3onehopMid_attr1"),
    strlist ("r3Local2threehopssend_attr1",
      "r3Local2threehopssend_attr2",
      "r3Local2threehopssend_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R3Local2Eca0Del (Ptr<Tuple> r3onehopMid)
{
  RAPIDNET_LOG_INFO ("R3Local2Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TWOHOPS)->Join (
    r3onehopMid,
    strlist ("twohops_attr1"),
    strlist ("r3onehopMid_attr2"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("r3onehopMid_attr3"),
      VarExpr::New ("twohops_attr3"))));

  result = result->Project (
    THREEHOPSDELETE,
    strlist ("r3onehopMid_attr1",
      "twohops_attr2",
      "Cost",
      "r3onehopMid_attr1"),
    strlist ("threehopsDelete_attr1",
      "threehopsDelete_attr2",
      "threehopsDelete_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R3Local2Eca1Ins (Ptr<Tuple> twohops)
{
  RAPIDNET_LOG_INFO ("R3Local2Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (R3ONEHOPMID)->Join (
    twohops,
    strlist ("r3onehopMid_attr2"),
    strlist ("twohops_attr1"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("r3onehopMid_attr3"),
      VarExpr::New ("twohops_attr3"))));

  result = result->Project (
    R3LOCAL2THREEHOPSSEND,
    strlist ("r3onehopMid_attr1",
      "twohops_attr2",
      "Cost",
      "r3onehopMid_attr1"),
    strlist ("r3Local2threehopssend_attr1",
      "r3Local2threehopssend_attr2",
      "r3Local2threehopssend_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R3Local2Eca1Del (Ptr<Tuple> twohops)
{
  RAPIDNET_LOG_INFO ("R3Local2Eca1Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (R3ONEHOPMID)->Join (
    twohops,
    strlist ("r3onehopMid_attr2"),
    strlist ("twohops_attr1"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("r3onehopMid_attr3"),
      VarExpr::New ("twohops_attr3"))));

  result = result->Project (
    THREEHOPSDELETE,
    strlist ("r3onehopMid_attr1",
      "twohops_attr2",
      "Cost",
      "r3onehopMid_attr1"),
    strlist ("threehopsDelete_attr1",
      "threehopsDelete_attr2",
      "threehopsDelete_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R4Local1Eca0RemoteIns (Ptr<Tuple> r4Local1r4twohopsMidsend)
{
  RAPIDNET_LOG_INFO ("R4Local1Eca0RemoteIns triggered");

  Ptr<Tuple> result = r4Local1r4twohopsMidsend;

  result = result->Project (
    R4TWOHOPSMID,
    strlist ("r4Local1r4twohopsMidsend_attr1",
      "r4Local1r4twohopsMidsend_attr2",
      "r4Local1r4twohopsMidsend_attr3"),
    strlist ("r4twohopsMid_attr1",
      "r4twohopsMid_attr2",
      "r4twohopsMid_attr3"));

  Insert (result);
}

void
Threehops::R4Local1Eca0RemoteDel (Ptr<Tuple> r4twohopsMidDelete)
{
  RAPIDNET_LOG_INFO ("R4Local1Eca0RemoteDel triggered");

  Ptr<Tuple> result = r4twohopsMidDelete;

  result = result->Project (
    R4TWOHOPSMID,
    strlist ("r4twohopsMidDelete_attr1",
      "r4twohopsMidDelete_attr2",
      "r4twohopsMidDelete_attr3"),
    strlist ("r4twohopsMid_attr1",
      "r4twohopsMid_attr2",
      "r4twohopsMid_attr3"));

  Delete (result);
}

void
Threehops::R4Local1Eca0Ins (Ptr<Tuple> twohops)
{
  RAPIDNET_LOG_INFO ("R4Local1Eca0Ins triggered");

  Ptr<Tuple> result = twohops;

  result = result->Project (
    R4LOCAL1R4TWOHOPSMIDSEND,
    strlist ("twohops_attr1",
      "twohops_attr2",
      "twohops_attr3",
      "twohops_attr2"),
    strlist ("r4Local1r4twohopsMidsend_attr1",
      "r4Local1r4twohopsMidsend_attr2",
      "r4Local1r4twohopsMidsend_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R4Local1Eca0Del (Ptr<Tuple> twohops)
{
  RAPIDNET_LOG_INFO ("R4Local1Eca0Del triggered");

  Ptr<Tuple> result = twohops;

  result = result->Project (
    R4TWOHOPSMIDDELETE,
    strlist ("twohops_attr1",
      "twohops_attr2",
      "twohops_attr3",
      "twohops_attr2"),
    strlist ("r4twohopsMidDelete_attr1",
      "r4twohopsMidDelete_attr2",
      "r4twohopsMidDelete_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R4Local2Eca0RemoteIns (Ptr<Tuple> r4Local2threehopssend)
{
  RAPIDNET_LOG_INFO ("R4Local2Eca0RemoteIns triggered");

  Ptr<Tuple> result = r4Local2threehopssend;

  result = result->Project (
    THREEHOPS,
    strlist ("r4Local2threehopssend_attr1",
      "r4Local2threehopssend_attr2",
      "r4Local2threehopssend_attr3"),
    strlist ("threehops_attr1",
      "threehops_attr2",
      "threehops_attr3"));

  Insert (result);
}

void
Threehops::R4Local2Eca0Ins (Ptr<Tuple> r4twohopsMid)
{
  RAPIDNET_LOG_INFO ("R4Local2Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (ONEHOP)->Join (
    r4twohopsMid,
    strlist ("onehop_attr1"),
    strlist ("r4twohopsMid_attr2"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("r4twohopsMid_attr3"),
      VarExpr::New ("onehop_attr3"))));

  result = result->Project (
    R4LOCAL2THREEHOPSSEND,
    strlist ("r4twohopsMid_attr1",
      "onehop_attr2",
      "Cost",
      "r4twohopsMid_attr1"),
    strlist ("r4Local2threehopssend_attr1",
      "r4Local2threehopssend_attr2",
      "r4Local2threehopssend_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R4Local2Eca0Del (Ptr<Tuple> r4twohopsMid)
{
  RAPIDNET_LOG_INFO ("R4Local2Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (ONEHOP)->Join (
    r4twohopsMid,
    strlist ("onehop_attr1"),
    strlist ("r4twohopsMid_attr2"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("r4twohopsMid_attr3"),
      VarExpr::New ("onehop_attr3"))));

  result = result->Project (
    THREEHOPSDELETE,
    strlist ("r4twohopsMid_attr1",
      "onehop_attr2",
      "Cost",
      "r4twohopsMid_attr1"),
    strlist ("threehopsDelete_attr1",
      "threehopsDelete_attr2",
      "threehopsDelete_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R4Local2Eca1Ins (Ptr<Tuple> onehop)
{
  RAPIDNET_LOG_INFO ("R4Local2Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (R4TWOHOPSMID)->Join (
    onehop,
    strlist ("r4twohopsMid_attr2"),
    strlist ("onehop_attr1"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("r4twohopsMid_attr3"),
      VarExpr::New ("onehop_attr3"))));

  result = result->Project (
    R4LOCAL2THREEHOPSSEND,
    strlist ("r4twohopsMid_attr1",
      "onehop_attr2",
      "Cost",
      "r4twohopsMid_attr1"),
    strlist ("r4Local2threehopssend_attr1",
      "r4Local2threehopssend_attr2",
      "r4Local2threehopssend_attr3",
      RN_DEST));

  Send (result);
}

void
Threehops::R4Local2Eca1Del (Ptr<Tuple> onehop)
{
  RAPIDNET_LOG_INFO ("R4Local2Eca1Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (R4TWOHOPSMID)->Join (
    onehop,
    strlist ("r4twohopsMid_attr2"),
    strlist ("onehop_attr1"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("r4twohopsMid_attr3"),
      VarExpr::New ("onehop_attr3"))));

  result = result->Project (
    THREEHOPSDELETE,
    strlist ("r4twohopsMid_attr1",
      "onehop_attr2",
      "Cost",
      "r4twohopsMid_attr1"),
    strlist ("threehopsDelete_attr1",
      "threehopsDelete_attr2",
      "threehopsDelete_attr3",
      RN_DEST));

  Send (result);
}

