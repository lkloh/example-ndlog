/* A RapidNet application. Generated by RapidNet compiler. */

#include "reachable.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::reachable;

const string Reachable::D2LOCAL1D2LINKMIDSEND = "d2Local1d2linkMidsend";
const string Reachable::D2LOCAL2REACHABLESEND = "d2Local2reachablesend";
const string Reachable::D2LINKMID = "d2linkMid";
const string Reachable::D2LINKMIDDELETE = "d2linkMidDelete";
const string Reachable::D3LOCAL1D3REACHABLEMIDSEND = "d3Local1d3reachableMidsend";
const string Reachable::D3LOCAL2REACHABLESEND = "d3Local2reachablesend";
const string Reachable::D3REACHABLEMID = "d3reachableMid";
const string Reachable::D3REACHABLEMIDDELETE = "d3reachableMidDelete";
const string Reachable::LINK = "link";
const string Reachable::ONEHOP = "onehop";
const string Reachable::REACHABLE = "reachable";
const string Reachable::REACHABLEDELETE = "reachableDelete";

NS_LOG_COMPONENT_DEFINE ("Reachable");
NS_OBJECT_ENSURE_REGISTERED (Reachable);

TypeId
Reachable::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::reachable::Reachable")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<Reachable> ()
    ;
  return tid;
}

Reachable::Reachable()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Reachable::~Reachable()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
Reachable::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
Reachable::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("Reachable Application Started");
}

void
Reachable::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("Reachable Application Stopped");
}

void
Reachable::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (D2LINKMID, attrdeflist (
    attrdef ("d2linkMid_attr1", IPV4),
    attrdef ("d2linkMid_attr2", IPV4)));

  AddRelationWithKeys (D3REACHABLEMID, attrdeflist (
    attrdef ("d3reachableMid_attr1", IPV4),
    attrdef ("d3reachableMid_attr2", IPV4)));

  AddRelationWithKeys (LINK, attrdeflist (
    attrdef ("link_attr1", IPV4),
    attrdef ("link_attr2", IPV4)));

  AddRelationWithKeys (REACHABLE, attrdeflist (
    attrdef ("reachable_attr1", IPV4),
    attrdef ("reachable_attr2", IPV4)));

}

void
Reachable::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, LINK))
    {
      D1Eca0Ins (tuple);
    }
  if (IsRecvEvent (tuple, D2LOCAL1D2LINKMIDSEND))
    {
      D2Local1Eca0RemoteIns (tuple);
    }
  if (IsRecvEvent (tuple, D2LINKMIDDELETE))
    {
      D2Local1Eca0RemoteDel (tuple);
    }
  if (IsInsertEvent (tuple, LINK))
    {
      D2Local1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LINK))
    {
      D2Local1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, D2LOCAL2REACHABLESEND))
    {
      D2Local2Eca0RemoteIns (tuple);
    }
  if (IsRecvEvent (tuple, REACHABLEDELETE))
    {
      D2Local2Eca0RemoteDel (tuple);
    }
  if (IsInsertEvent (tuple, D2LINKMID))
    {
      D2Local2Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, D2LINKMID))
    {
      D2Local2Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, REACHABLE))
    {
      D2Local2Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, REACHABLE))
    {
      D2Local2Eca1Del (tuple);
    }
  if (IsRecvEvent (tuple, D3LOCAL1D3REACHABLEMIDSEND))
    {
      D3Local1Eca0RemoteIns (tuple);
    }
  if (IsRecvEvent (tuple, D3REACHABLEMIDDELETE))
    {
      D3Local1Eca0RemoteDel (tuple);
    }
  if (IsInsertEvent (tuple, REACHABLE))
    {
      D3Local1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, REACHABLE))
    {
      D3Local1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, D3LOCAL2REACHABLESEND))
    {
      D3Local2Eca0RemoteIns (tuple);
    }
  if (IsInsertEvent (tuple, D3REACHABLEMID))
    {
      D3Local2Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, D3REACHABLEMID))
    {
      D3Local2Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, LINK))
    {
      D3Local2Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LINK))
    {
      D3Local2Eca1Del (tuple);
    }
}

void
Reachable::D1Eca0Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("D1Eca0Ins triggered");

  Ptr<Tuple> result = link;

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("link_attr3"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    ONEHOP,
    strlist ("link_attr1",
      "link_attr2",
      "link_attr3"),
    strlist ("onehop_attr1",
      "onehop_attr2",
      "onehop_attr3"));

  SendLocal (result);
}

void
Reachable::D2Local1Eca0RemoteIns (Ptr<Tuple> d2Local1d2linkMidsend)
{
  RAPIDNET_LOG_INFO ("D2Local1Eca0RemoteIns triggered");

  Ptr<Tuple> result = d2Local1d2linkMidsend;

  result = result->Project (
    D2LINKMID,
    strlist ("d2Local1d2linkMidsend_attr1",
      "d2Local1d2linkMidsend_attr2",
      "d2Local1d2linkMidsend_attr3"),
    strlist ("d2linkMid_attr1",
      "d2linkMid_attr2",
      "d2linkMid_attr3"));

  Insert (result);
}

void
Reachable::D2Local1Eca0RemoteDel (Ptr<Tuple> d2linkMidDelete)
{
  RAPIDNET_LOG_INFO ("D2Local1Eca0RemoteDel triggered");

  Ptr<Tuple> result = d2linkMidDelete;

  result = result->Project (
    D2LINKMID,
    strlist ("d2linkMidDelete_attr1",
      "d2linkMidDelete_attr2",
      "d2linkMidDelete_attr3"),
    strlist ("d2linkMid_attr1",
      "d2linkMid_attr2",
      "d2linkMid_attr3"));

  Delete (result);
}

void
Reachable::D2Local1Eca0Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("D2Local1Eca0Ins triggered");

  Ptr<Tuple> result = link;

  result = result->Project (
    D2LOCAL1D2LINKMIDSEND,
    strlist ("link_attr1",
      "link_attr2",
      "link_attr3",
      "link_attr2"),
    strlist ("d2Local1d2linkMidsend_attr1",
      "d2Local1d2linkMidsend_attr2",
      "d2Local1d2linkMidsend_attr3",
      RN_DEST));

  Send (result);
}

void
Reachable::D2Local1Eca0Del (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("D2Local1Eca0Del triggered");

  Ptr<Tuple> result = link;

  result = result->Project (
    D2LINKMIDDELETE,
    strlist ("link_attr1",
      "link_attr2",
      "link_attr3",
      "link_attr2"),
    strlist ("d2linkMidDelete_attr1",
      "d2linkMidDelete_attr2",
      "d2linkMidDelete_attr3",
      RN_DEST));

  Send (result);
}

void
Reachable::D2Local2Eca0RemoteIns (Ptr<Tuple> d2Local2reachablesend)
{
  RAPIDNET_LOG_INFO ("D2Local2Eca0RemoteIns triggered");

  Ptr<Tuple> result = d2Local2reachablesend;

  result = result->Project (
    REACHABLE,
    strlist ("d2Local2reachablesend_attr1",
      "d2Local2reachablesend_attr2",
      "d2Local2reachablesend_attr3"),
    strlist ("reachable_attr1",
      "reachable_attr2",
      "reachable_attr3"));

  Insert (result);
}

void
Reachable::D2Local2Eca0RemoteDel (Ptr<Tuple> reachableDelete)
{
  RAPIDNET_LOG_INFO ("D2Local2Eca0RemoteDel triggered");

  Ptr<Tuple> result = reachableDelete;

  result = result->Project (
    REACHABLE,
    strlist ("reachableDelete_attr1",
      "reachableDelete_attr2",
      "reachableDelete_attr3"),
    strlist ("reachable_attr1",
      "reachable_attr2",
      "reachable_attr3"));

  Delete (result);
}

void
Reachable::D2Local2Eca0Ins (Ptr<Tuple> d2linkMid)
{
  RAPIDNET_LOG_INFO ("D2Local2Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (REACHABLE)->Join (
    d2linkMid,
    strlist ("reachable_attr1"),
    strlist ("d2linkMid_attr2"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("d2linkMid_attr3"),
      VarExpr::New ("reachable_attr3"))));

  result = result->Project (
    D2LOCAL2REACHABLESEND,
    strlist ("d2linkMid_attr1",
      "reachable_attr2",
      "Cost",
      "d2linkMid_attr1"),
    strlist ("d2Local2reachablesend_attr1",
      "d2Local2reachablesend_attr2",
      "d2Local2reachablesend_attr3",
      RN_DEST));

  Send (result);
}

void
Reachable::D2Local2Eca0Del (Ptr<Tuple> d2linkMid)
{
  RAPIDNET_LOG_INFO ("D2Local2Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (REACHABLE)->Join (
    d2linkMid,
    strlist ("reachable_attr1"),
    strlist ("d2linkMid_attr2"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("d2linkMid_attr3"),
      VarExpr::New ("reachable_attr3"))));

  result = result->Project (
    REACHABLEDELETE,
    strlist ("d2linkMid_attr1",
      "reachable_attr2",
      "Cost",
      "d2linkMid_attr1"),
    strlist ("reachableDelete_attr1",
      "reachableDelete_attr2",
      "reachableDelete_attr3",
      RN_DEST));

  Send (result);
}

void
Reachable::D2Local2Eca1Ins (Ptr<Tuple> reachable)
{
  RAPIDNET_LOG_INFO ("D2Local2Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (D2LINKMID)->Join (
    reachable,
    strlist ("d2linkMid_attr2"),
    strlist ("reachable_attr1"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("d2linkMid_attr3"),
      VarExpr::New ("reachable_attr3"))));

  result = result->Project (
    D2LOCAL2REACHABLESEND,
    strlist ("d2linkMid_attr1",
      "reachable_attr2",
      "Cost",
      "d2linkMid_attr1"),
    strlist ("d2Local2reachablesend_attr1",
      "d2Local2reachablesend_attr2",
      "d2Local2reachablesend_attr3",
      RN_DEST));

  Send (result);
}

void
Reachable::D2Local2Eca1Del (Ptr<Tuple> reachable)
{
  RAPIDNET_LOG_INFO ("D2Local2Eca1Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (D2LINKMID)->Join (
    reachable,
    strlist ("d2linkMid_attr2"),
    strlist ("reachable_attr1"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("d2linkMid_attr3"),
      VarExpr::New ("reachable_attr3"))));

  result = result->Project (
    REACHABLEDELETE,
    strlist ("d2linkMid_attr1",
      "reachable_attr2",
      "Cost",
      "d2linkMid_attr1"),
    strlist ("reachableDelete_attr1",
      "reachableDelete_attr2",
      "reachableDelete_attr3",
      RN_DEST));

  Send (result);
}

void
Reachable::D3Local1Eca0RemoteIns (Ptr<Tuple> d3Local1d3reachableMidsend)
{
  RAPIDNET_LOG_INFO ("D3Local1Eca0RemoteIns triggered");

  Ptr<Tuple> result = d3Local1d3reachableMidsend;

  result = result->Project (
    D3REACHABLEMID,
    strlist ("d3Local1d3reachableMidsend_attr1",
      "d3Local1d3reachableMidsend_attr2",
      "d3Local1d3reachableMidsend_attr3"),
    strlist ("d3reachableMid_attr1",
      "d3reachableMid_attr2",
      "d3reachableMid_attr3"));

  Insert (result);
}

void
Reachable::D3Local1Eca0RemoteDel (Ptr<Tuple> d3reachableMidDelete)
{
  RAPIDNET_LOG_INFO ("D3Local1Eca0RemoteDel triggered");

  Ptr<Tuple> result = d3reachableMidDelete;

  result = result->Project (
    D3REACHABLEMID,
    strlist ("d3reachableMidDelete_attr1",
      "d3reachableMidDelete_attr2",
      "d3reachableMidDelete_attr3"),
    strlist ("d3reachableMid_attr1",
      "d3reachableMid_attr2",
      "d3reachableMid_attr3"));

  Delete (result);
}

void
Reachable::D3Local1Eca0Ins (Ptr<Tuple> reachable)
{
  RAPIDNET_LOG_INFO ("D3Local1Eca0Ins triggered");

  Ptr<Tuple> result = reachable;

  result = result->Project (
    D3LOCAL1D3REACHABLEMIDSEND,
    strlist ("reachable_attr1",
      "reachable_attr2",
      "reachable_attr3",
      "reachable_attr2"),
    strlist ("d3Local1d3reachableMidsend_attr1",
      "d3Local1d3reachableMidsend_attr2",
      "d3Local1d3reachableMidsend_attr3",
      RN_DEST));

  Send (result);
}

void
Reachable::D3Local1Eca0Del (Ptr<Tuple> reachable)
{
  RAPIDNET_LOG_INFO ("D3Local1Eca0Del triggered");

  Ptr<Tuple> result = reachable;

  result = result->Project (
    D3REACHABLEMIDDELETE,
    strlist ("reachable_attr1",
      "reachable_attr2",
      "reachable_attr3",
      "reachable_attr2"),
    strlist ("d3reachableMidDelete_attr1",
      "d3reachableMidDelete_attr2",
      "d3reachableMidDelete_attr3",
      RN_DEST));

  Send (result);
}

void
Reachable::D3Local2Eca0RemoteIns (Ptr<Tuple> d3Local2reachablesend)
{
  RAPIDNET_LOG_INFO ("D3Local2Eca0RemoteIns triggered");

  Ptr<Tuple> result = d3Local2reachablesend;

  result = result->Project (
    REACHABLE,
    strlist ("d3Local2reachablesend_attr1",
      "d3Local2reachablesend_attr2",
      "d3Local2reachablesend_attr3"),
    strlist ("reachable_attr1",
      "reachable_attr2",
      "reachable_attr3"));

  Insert (result);
}

void
Reachable::D3Local2Eca0Ins (Ptr<Tuple> d3reachableMid)
{
  RAPIDNET_LOG_INFO ("D3Local2Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINK)->Join (
    d3reachableMid,
    strlist ("link_attr1"),
    strlist ("d3reachableMid_attr2"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("d3reachableMid_attr3"),
      VarExpr::New ("link_attr3"))));

  result = result->Project (
    D3LOCAL2REACHABLESEND,
    strlist ("d3reachableMid_attr1",
      "link_attr2",
      "Cost",
      "d3reachableMid_attr1"),
    strlist ("d3Local2reachablesend_attr1",
      "d3Local2reachablesend_attr2",
      "d3Local2reachablesend_attr3",
      RN_DEST));

  Send (result);
}

void
Reachable::D3Local2Eca0Del (Ptr<Tuple> d3reachableMid)
{
  RAPIDNET_LOG_INFO ("D3Local2Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINK)->Join (
    d3reachableMid,
    strlist ("link_attr1"),
    strlist ("d3reachableMid_attr2"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("d3reachableMid_attr3"),
      VarExpr::New ("link_attr3"))));

  result = result->Project (
    REACHABLEDELETE,
    strlist ("d3reachableMid_attr1",
      "link_attr2",
      "Cost",
      "d3reachableMid_attr1"),
    strlist ("reachableDelete_attr1",
      "reachableDelete_attr2",
      "reachableDelete_attr3",
      RN_DEST));

  Send (result);
}

void
Reachable::D3Local2Eca1Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("D3Local2Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (D3REACHABLEMID)->Join (
    link,
    strlist ("d3reachableMid_attr2"),
    strlist ("link_attr1"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("d3reachableMid_attr3"),
      VarExpr::New ("link_attr3"))));

  result = result->Project (
    D3LOCAL2REACHABLESEND,
    strlist ("d3reachableMid_attr1",
      "link_attr2",
      "Cost",
      "d3reachableMid_attr1"),
    strlist ("d3Local2reachablesend_attr1",
      "d3Local2reachablesend_attr2",
      "d3Local2reachablesend_attr3",
      RN_DEST));

  Send (result);
}

void
Reachable::D3Local2Eca1Del (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("D3Local2Eca1Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (D3REACHABLEMID)->Join (
    link,
    strlist ("d3reachableMid_attr2"),
    strlist ("link_attr1"));

  result->Assign (Assignor::New ("Cost",
    Operation::New (RN_PLUS,
      VarExpr::New ("d3reachableMid_attr3"),
      VarExpr::New ("link_attr3"))));

  result = result->Project (
    REACHABLEDELETE,
    strlist ("d3reachableMid_attr1",
      "link_attr2",
      "Cost",
      "d3reachableMid_attr1"),
    strlist ("reachableDelete_attr1",
      "reachableDelete_attr2",
      "reachableDelete_attr3",
      RN_DEST));

  Send (result);
}

